namespace ZotapaySDK.Models.OrderStatusCheck
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Security.Cryptography;
    using System.Text;
    using ZotapaySDK.Contracts;
    using static ZotapaySDK.Static.Constants;

    /// <summary>
    /// Order status check request, as per https://doc.zotapay.com/deposit/1.0/#order-status-request
    /// </summary>
    public class MGQueryTxnRequest : IMGRequest
    {
        /// <summary>
        /// Default constructor will auto-set timestamp parameter
        /// </summary>
        public MGQueryTxnRequest()
        {
            Int32 ts = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
            this.Timestamp = ts.ToString();
        }

        /// <summary>
        /// Unique merchant identifier provided by Zotapay (see https://doc.zotapay.com/deposit/1.0/#before-you-begin section)
        /// </summary>
        [Required, StringLength(32, MinimumLength = 2)]
        [DataMember(Name = "merchantID")]
        private string MerchantId { get; set; }

        /// <summary>
        /// Order unique identifier generated by Zotapay
        /// </summary>
        [Required, StringLength(128, MinimumLength = 2)]
        [DataMember(Name = "orderID")]
        public string OrderID { get; set; }

        /// <summary>
        /// Merchant-defined unique order identifier
        /// </summary>
        [Required, StringLength(128, MinimumLength = 2)]
        [DataMember(Name = "merchantOrderID")]
        public string MerchantOrderID { get; set; }

        /// <summary>
        /// Unix timestamp of the request time - will be auto set
        /// </summary>
        [Required, StringLength(15, MinimumLength = 2)]
        [DataMember(Name = "timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// Request checksum encrypted with SHA-256
        /// </summary>
        [Required, StringLength(64, MinimumLength = 2)]
        [DataMember(Name = "signature")]
        public string Signature { get; set; }

        public void GenerateSignature(string endpointId, string secret)
        {
            // string to sign
            string toSign = $"{this.MerchantId}{this.MerchantOrderID}{this.OrderID}{this.Timestamp}{secret}";

            using (SHA256 sha256Hash = SHA256.Create())
            {
                // Get the hash in a byte array
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(toSign));

                // Convert to hex lowercase string 
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < bytes.Length; i++)
                {
                    builder.Append(bytes[i].ToString("x2"));
                }
                this.Signature = builder.ToString().ToLower();
            }
        }

        public string GetRequestUrl(string baseUrl, string endpoint)
        {
            return baseUrl + URL.PATH_STATUS_CHECK;
        }

        IMGResult IMGRequest.GetResultInstance()
        {
            return new MGQueryTxnResult();
        }

        void IMGRequest.SetupPrivateMembers(string merchantId)
        {
            this.MerchantId = merchantId;
        }
    }
}
